<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-23T10:50:04+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Grissom’s Blog</title><subtitle>An amazing website.</subtitle><author><name>Grissom</name></author><entry><title type="html">MariaDB</title><link href="http://localhost:4000/database/mariadb/" rel="alternate" type="text/html" title="MariaDB" /><published>2023-05-23T10:28:33+08:00</published><updated>2023-05-23T10:28:33+08:00</updated><id>http://localhost:4000/database/mariadb</id><content type="html" xml:base="http://localhost:4000/database/mariadb/"><![CDATA[<h1 id="安装">安装</h1>
<h2 id="服务端">服务端<a id="install-server"></a></h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>mariadb-server
</code></pre></div></div>

<h2 id="客户端">客户端<a id="install-client"></a></h2>
<h3 id="ubuntu-命令行客户端">Ubuntu 命令行客户端</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>mariadb-client
</code></pre></div></div>

<h3 id="windows-客户端">Windows 客户端</h3>
<ul>
  <li><a href="https://dev.mysql.com/downloads/workbench/">MySQL Workbench</a></li>
  <li><a href="https://www.heidisql.com/download.php">HeidiSQL</a></li>
  <li><a href="https://www.navicat.com.cn/download/navicat-premium">Navicat</a></li>
  <li><a href="https://www.webyog.com/en/downloads">SQLyog</a></li>
</ul>

<h3 id="mac-客户端">Mac 客户端</h3>
<ul>
  <li><a href="https://sequelpro.com/download">Sequel Pro</a></li>
</ul>

<h2 id="配置">配置</h2>
<h3 id="服务端ip绑定和用户权限">服务端(ip绑定和用户权限)<a id="config-server"></a></h3>
<h4 id="初始化-root-密码">初始化 root 密码</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mysql_secure_installation
</code></pre></div></div>
<h4 id="ip绑定">ip绑定</h4>
<ul>
  <li>需要修改配置文件，使其支持远程连接，这里远程是指 server 绑定到多个网卡的 IP 地址，允许通过这些本机的网卡 IP 地址连接到 server</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/mysql/mariadb.conf.d/50-server.cnf
<span class="c"># 修改 bind-address 为 0.0.0.0, 默认是 127.0.0.1, 即只能本地 localhost 连接 ,然后重启服务</span>

</code></pre></div></div>
<h4 id="用户权限">用户权限</h4>
<ul>
  <li>配置用户权限</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 登录 mysql</span>
mysql <span class="nt">-u</span> root <span class="nt">-p</span>
<span class="c"># 选择数据库</span>
use mysql<span class="p">;</span>
<span class="c"># 查看用户</span>
<span class="k">select </span>user,host from user<span class="p">;</span>

<span class="c"># 创建用户，下面的 % 是指所有 IP 地址都可以连接，如果指定 IP 地址，如 '用户名'@'192.168.10.8', 也可以用通配符指定网段 '用户名'@'192.168.10.%'</span>
create user <span class="s1">'用户名'</span>@<span class="s1">'%'</span> identified by <span class="s1">'密码'</span><span class="p">;</span>

<span class="c"># 授权，% 可改成具体的ip地址，'用户名'@'%' 必须存在于 user 表中，*.* 表示所有数据库，all privileges 表示所有权限</span>
grant all privileges on <span class="k">*</span>.<span class="k">*</span> to <span class="s1">'用户名'</span>@<span class="s1">'%'</span><span class="p">;</span>

<span class="c"># 查看用户权限</span>
show grants <span class="k">for</span> <span class="s1">'用户名'</span>@<span class="s1">'%'</span><span class="p">;</span>

<span class="c"># 刷新权限</span>
flush privileges<span class="p">;</span>

</code></pre></div></div>
<ul>
  <li>移除用户权限</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 移除权限</span>
revoke all privileges on <span class="k">*</span>.<span class="k">*</span> from <span class="s1">'用户名'</span>@<span class="s1">'%'</span><span class="p">;</span>

<span class="c"># 删除用户</span>
drop user <span class="s1">'用户名'</span>@<span class="s1">'%'</span><span class="p">;</span>

</code></pre></div></div>

<h1 id="拉数据">拉数据</h1>
<h2 id="快速导出excel效率最高的方式">快速导出excel,效率最高的方式</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 导出csv</span>
<span class="k">select</span> <span class="k">*</span> from table_name into outfile <span class="s1">'/tmp/table_name.csv'</span> fields terminated by <span class="s1">','</span> optionally enclosed by <span class="s1">'"'</span> escaped by <span class="s1">'"'</span> lines terminated by <span class="s1">'\n'</span><span class="p">;</span>
<span class="c"># 使用 bash 导出 csv</span>
mysql <span class="nt">-u</span> your_username <span class="nt">-p</span> your_database_name <span class="nt">-e</span> <span class="s2">"SELECT * FROM your_table_name;"</span> | <span class="nb">sed</span> <span class="s1">'s/\t/","/g;s/"NULL"/""/g;s/^/"/;s/$/"/'</span> <span class="o">&gt;</span> /path/to/export/directory/your_table_name.csv
<span class="c"># 然后用 zip 压缩</span>
zip <span class="nt">-r</span> your_table_name.zip your_table_name.csv
<span class="c"># 最后用 scp/ftp 拉到本地</span>
scp your_username@your_server_ip:/path/to/your_table_name.zip /path/to/your_local_directory

</code></pre></div></div>]]></content><author><name>Grissom</name></author><category term="database" /><category term="mariadb" /><category term="mysql" /><summary type="html"><![CDATA[安装 服务端 sudo apt-get install mariadb-server]]></summary></entry><entry><title type="html">Summary</title><link href="http://localhost:4000/idea/summary/" rel="alternate" type="text/html" title="Summary" /><published>2023-05-23T09:28:33+08:00</published><updated>2023-05-23T09:28:33+08:00</updated><id>http://localhost:4000/idea/summary</id><content type="html" xml:base="http://localhost:4000/idea/summary/"><![CDATA[<h1 id="linux">linux</h1>
<h2 id="权限管理">权限管理</h2>
<ul>
  <li>角色分为三类：owner、group、other</li>
  <li>三类权限分别为：r(4)、w(2)、x(1)</li>
  <li>一个文件只能有一个所有者，但可以有多个用户组</li>
  <li>一个用户可以同时属于多个组，但只有一个主组</li>
  <li>一个用户的权限由其所有者权限和所属组权限共同决定</li>
</ul>

<h2 id="文件系统">文件系统</h2>
<ul>
  <li>linux 将所有的硬件设备都当作文件来管理，包括硬盘、U盘、键盘、鼠标、显示器等</li>
  <li>好处一，所有的设备都可以用同样的方式访问，而不必区分设备的类型</li>
  <li>好处二，所有的设备都可以用同样的命令来管理，而不必记忆特定的命令</li>
  <li>好处三，所有的设备都可以用同样的权限来管理，而不必区分设备的类型</li>
  <li>好处四，所有的设备都可以用同样的文件系统来管理，而不必区分设备的类型</li>
</ul>

<h1 id="mysql">MySQL</h1>
<h2 id="innodb-存储引擎">InnoDB 存储引擎</h2>
<h3 id="数据存储">数据存储</h3>
<ul>
  <li>数据存储在数据页中，每个数据页的大小为 16KB</li>
  <li>超出 16KB 的数据会存储在溢出页中，溢出页的大小为 16KB</li>
  <li>每个数据页中都有一个指向溢出页的指针</li>
</ul>

<h3 id="索引">索引</h3>
<ul>
  <li>使用B+树作为索引结构，每个节点(数据页)的大小为 16KB</li>
  <li>属于聚集索引，即索引和数据保存在同一颗树，数据页中的数据按照主键的顺序存储</li>
  <li>叶子节点中存储的是数据，非叶子节点中存储的是主键</li>
</ul>

<h3 id="事务">事务</h3>
<ul>
  <li>事务的隔离级别
    <ul>
      <li>读未提交(read uncommitted)</li>
      <li>读已提交(read committed)</li>
      <li>可重复读(repeatable read)</li>
      <li>串行化(serializable)</li>
    </ul>
  </li>
  <li>事务的并发问题
    <ul>
      <li>脏读(dirty read)</li>
      <li>不可重复读(non-repeatable read)</li>
      <li>幻读(phantom read)</li>
    </ul>
  </li>
  <li>事务的隔离级别和并发问题
    <ul>
      <li>读未提交(read uncommitted)
        <ul>
          <li>脏读(dirty read)</li>
          <li>不可重复读(non-repeatable read)</li>
          <li>幻读(phantom read)</li>
        </ul>
      </li>
      <li>读已提交(read committed)
        <ul>
          <li>不可重复读(non-repeatable read)</li>
          <li>幻读(phantom read)</li>
        </ul>
      </li>
      <li>可重复读(repeatable read)
        <ul>
          <li>幻读(phantom read)</li>
        </ul>
      </li>
      <li>串行化(serializable)
        <ul>
          <li>无并发问题</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>锁机制
    <ul>
      <li>共享锁(shared lock)</li>
      <li>排他锁(exclusive lock)</li>
      <li>记录锁(record lock)</li>
      <li>间隙锁(gap lock)</li>
      <li>临键锁(next-key lock)</li>
    </ul>
  </li>
</ul>

<h1 id="java">Java</h1>
<h2 id="jvm">JVM</h2>
<h3 id="内存模型运行时数据区分区分代">内存模型(运行时数据区)，分区分代</h3>
<ul>
  <li>堆
    <ul>
      <li>存储的数据
        <ul>
          <li>存储对象实例</li>
          <li>堆中的对象实例可以被所有线程访问</li>
          <li>堆中的对象实例可以被所有线程共享</li>
          <li>堆中的对象实例可以被所有线程修改</li>
        </ul>
      </li>
      <li>堆是GC的主要区域
        <ul>
          <li>管理方式：分代管理</li>
          <li>分代：新生代、老年代、永久代</li>
          <li>新生代：Eden区、Survivor区</li>
          <li>老年代：存储生命周期较长的对象实例</li>
          <li>永久代(也就是方法区)：存储类的信息、常量、静态变量、即时编译器编译后的代码、运行时常量池、方法的字节码、方法的访问权限、方法的参数和返回值、方法的局部变量表大小</li>
        </ul>
      </li>
      <li>GC算法
        <ul>
          <li>标记-清除算法</li>
          <li>复制算法</li>
          <li>标记-整理算法</li>
          <li>分代收集算法</li>
        </ul>
      </li>
      <li>垃圾收集器
        <ul>
          <li>Serial Old收集器</li>
          <li>Parallel Old收集器</li>
          <li>Serial收集器</li>
          <li>ParNew收集器</li>
          <li>CMS收集器</li>
          <li>G1收集器</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>方法区
    <ul>
      <li>存储类的信息</li>
      <li>存储常量</li>
      <li>存储静态变量</li>
      <li>存储即时编译器编译后的代码</li>
      <li>存储运行时常量池</li>
      <li>存储方法的字节码</li>
      <li>存储方法的访问权限</li>
      <li>存储方法的参数和返回值</li>
      <li>存储方法的局部变量表大小</li>
    </ul>
  </li>
  <li>线程包含的内存
    <ul>
      <li>程序计数器</li>
      <li>虚拟机栈</li>
      <li>本地方法栈</li>
    </ul>
  </li>
  <li>程序计数器
    <ul>
      <li>用于记录当前线程执行的字节码的行号</li>
      <li>线程私有</li>
      <li>线程切换不会影响程序计数器的值</li>
      <li>为了线程切换后能恢复到正确的执行位置，所以每个线程都需要一个独立的程序计数器</li>
    </ul>
  </li>
  <li>虚拟机栈, 包含一个或多个栈帧，调用新方法时，会创建新的栈帧，并压入到虚拟机栈的顶部
    <ul>
      <li>每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息</li>
      <li>局部变量表
        <ul>
          <li>存储方法的参数和局部变量</li>
          <li>以变量槽(slot)为最小单位，一个变量槽可以存储一个32位以内的数据类型</li>
          <li>局部变量表的大小在编译期间就已经确定，存储在方法区中的Code属性中</li>
          <li>局部变量表的大小在运行期间不会改变</li>
          <li>局部变量表的大小会影响方法的栈帧大小，进而影响方法的可用性</li>
        </ul>
      </li>
      <li>操作数栈
        <ul>
          <li>用于存储方法执行过程中的中间结果</li>
          <li>以操作数栈帧(frame)为最小单位，一个操作数栈帧可以存储一个32位以内的数据类型</li>
          <li>操作数栈的大小在编译期间就已经确定，存储在方法区中的Code属性中</li>
          <li>操作数栈的大小在运行期间不会改变</li>
          <li>操作数栈的大小会影响方法的栈帧大小，进而影响方法的可用性</li>
        </ul>
      </li>
      <li>动态链接
        <ul>
          <li>用于指向运行时常量池中该方法的引用</li>
          <li>在类加载的时候，动态链接会被指向该方法在常量池中的引用</li>
        </ul>
      </li>
      <li>方法出口
        <ul>
          <li>用于指向方法的返回地址</li>
          <li>方法出口的值在编译期间就已经确定，存储在方法区中的Code属性中</li>
          <li>方法出口的值在运行期间不会改变</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="加密通信">加密通信</h1>
<h2 id="加密方式">加密方式</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 对称加密
    - 加密和解密使用同一个密钥
    - 加密速度快
    - 密钥的传输比较麻烦
    - 适合对大数据进行加密
- 非对称加密    
    - 加密和解密使用不同的密钥
    - 加密速度慢
    - 密钥的传输比较方便
    - 适合对小数据进行加密
- 混合加密   
    - 先使用非对称加密对对称加密的密钥进行加密，然后使用对称加密对数据进行加密
    - 既能保证数据的安全性，又能保证加密的速度 # 哈希 ## 哈希算法在分区中的应用
- 哈希取余分区
- 一致性哈希分区: 将整个哈希空间组织成一个虚拟的圆环，将节点映射到圆环上，将数据映射到圆环上，数据会被映射到离它最近的节点上，当节点发生变化时，只会影响到它附近的数据，而不会影响到整个哈希空间, 但是会导致数据倾斜，可以使用虚拟节点解决数据倾斜的问题 
    - 虚拟圆环大小为 2^32, 也就是 0 ~ 2^32-1
    - 对key的哈希值计算需要使用 CRC32 算法，因为它的哈希值范围是 0 ~ 2^32-1
- 带虚拟节点的一致性哈希分片
</code></pre></div></div>]]></content><author><name>Grissom</name></author><category term="idea" /><category term="linux" /><category term="mysql" /><category term="java" /><category term="jvm" /><category term="encryption" /><category term="hash" /><category term="redis" /><category term="github" /><category term="mariadb" /><category term="ssh" /><category term="ssl" /><category term="server" /><category term="cache" /><category term="security" /><summary type="html"><![CDATA[linux 权限管理 角色分为三类：owner、group、other 三类权限分别为：r(4)、w(2)、x(1) 一个文件只能有一个所有者，但可以有多个用户组 一个用户可以同时属于多个组，但只有一个主组 一个用户的权限由其所有者权限和所属组权限共同决定]]></summary></entry><entry><title type="html">科学上网</title><link href="http://localhost:4000/network/scientific-surfing/" rel="alternate" type="text/html" title="科学上网" /><published>2023-05-23T09:28:33+08:00</published><updated>2023-05-23T09:28:33+08:00</updated><id>http://localhost:4000/network/scientific-surfing</id><content type="html" xml:base="http://localhost:4000/network/scientific-surfing/"><![CDATA[<h1 id="openvpn">OpenVPN</h1>
<h2 id="安装">安装</h2>
<h3 id="服务端">服务端<a id="openvpn-server"></a></h3>
<ul>
  <li>参考 <a href="https://github.com/angristan/openvpn-install">https://github.com/angristan/openvpn-install</a></li>
  <li>全部默认即可</li>
  <li>vpn 会安装虚拟网卡接管全部流量，如果不需要全部走vpn, 需要配置route, 可以在客户端也可以在服务端配置,但最终连上服务端时，服务端会把 push “route ip mask “ 这些配置发送给客户端配置文件起效, 同时需要注释掉配置文件里的 <code class="language-plaintext highlighter-rouge">push "redirect_gateway def1 bypass-dhcp"</code></li>
  <li>防火墙需要开放 1194/udp, 1194/tcp
    <h3 id="客户端">客户端<a id="openvpn-client"></a></h3>
  </li>
  <li>建议使用最新版的 <a href="https://openvpn.net/community-downloads/">OpenVPN GUI</a></li>
  <li>安装后在网络适配器里会多出 OpenVPN Data Channel Offload， 旧版本(2.4)多出 本地连接2, 而且默认都有红叉(Network cable unplugged)，需要等连上服务端后才会变为可用</li>
  <li>配置文件<strong>需要去掉 <code class="language-plaintext highlighter-rouge">setenv opt block-outside-dns</code></strong>， 否则会导致未走 vpn 的流量全部被block掉，而无法访问网络</li>
  <li>配置route <code class="language-plaintext highlighter-rouge">route 10.0.0.0 255.255.255.0 vpn_gateway</code>, 所有 10.*开头的ip都会走 vpn gateway, 该配置可以直接写死在客户端配置文件，也可以写在服务端 <code class="language-plaintext highlighter-rouge">push "route 10.0.0.0 255.255.255.0 vpn_gateway"</code></li>
  <li>客户端会先将域名解析成 ip 后，才会走 vpn, 所以通过 vpn 的http 请求已是通过 DNS 解析后的 ip, vpn 只是服务器和客户端之间的一条流量通道，它不是代理，它和 shadowsocks, v2ray 这些代理有本质区别，这些代理是直接代理所请求url的服务器，vpn 查看浏览器的 remote-ip url原服务器的ip, 但代理的是代理的ip，一般是 127.0.0.1, 它们共同点都是加密通信，访问网络最终由服务器端的网络负责。</li>
</ul>

<h1 id="代理">代理</h1>
<h2 id="shadowsocks">shadowsocks</h2>
<h3 id="服务端-1">服务端<a id="shadowsocks-server"></a></h3>
<ul>
  <li>参考 <a href="https://github.com/shadowsocks/go-shadowsocks2">https://github.com/shadowsocks/go-shadowsocks2</a></li>
  <li>v2ray 插件<a href="https://github.com/shadowsocks/v2ray-plugin">https://github.com/shadowsocks/v2ray-plugin</a></li>
  <li>生成自验证的ssl证书</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c"># 生成CA根证书(用来签发服务器证书，供客户端验证证书是否可信)</span>
openssl genrsa <span class="nt">-out</span> ca.key 2048
openssl req <span class="nt">-new</span> <span class="nt">-x509</span> <span class="nt">-days</span> 365 <span class="nt">-key</span> ca.key <span class="nt">-subj</span> <span class="s2">"/C=CN/ST=GD/L=SZ/O=Acme, Inc./CN=Acme Root CA"</span> <span class="nt">-out</span> ca.crt

<span class="c"># 签发证书，-subj 参数添加example.com域名, 强制客户端必须携带example.com域名的参数才能连接，用来伪装成正常网站的https访问</span>
openssl req <span class="nt">-newkey</span> rsa:2048 <span class="nt">-nodes</span> <span class="nt">-keyout</span> server.key <span class="nt">-subj</span> <span class="s2">"/C=CN/ST=GD/L=SZ/O=Acme, Inc./CN=*.example.com"</span> <span class="nt">-out</span> server.csr
openssl x509 <span class="nt">-req</span> <span class="nt">-extfile</span> &lt;<span class="o">(</span><span class="nb">printf</span> <span class="s2">"subjectAltName=DNS:example.com,DNS:www.example.com"</span><span class="o">)</span> <span class="nt">-days</span> 365 <span class="nt">-in</span> server.csr <span class="nt">-CA</span> ca.crt <span class="nt">-CAkey</span> ca.key <span class="nt">-CAcreateserial</span> <span class="nt">-out</span> server.crt

<span class="c"># 注意： ca.crt 需要发送给客户端(windows 系统则导入到 certmgr的Trusted Root Certification，以便让系统信任有该CA签发的证书。而 server.crt server.key 需要发送给服务端，server.key 是私钥，server.crt 是公钥，服务端需要用私钥解密客户端发送的数据，它不需要我们手动发送给客户端，因为客户端在连接上服务端后，服务端会发送 server.crt 给客户端，客户端会使用 ca.crt 验证 server.crt 是否可信，如果可信则会使用 server.crt 的公钥加密数据发送给服务端，服务端使用 server.key 解密数据，这样就实现了双向加密通信。</span>

</code></pre></div></div>

<ul>
  <li>运行脚本</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#/bin/sh</span>
./shadowsocks2-linux <span class="nt">-s</span> <span class="s1">'ss://AEAD_CHACHA20_POLY1305:yourpassword@:443'</span> <span class="nt">-verbose</span>     <span class="nt">-plugin</span> ./v2ray-plugin_linux_amd64 <span class="nt">-plugin-opts</span> <span class="s2">"server;tls;host=example.com;cert=./cert/server.crt;key=./cert/server.key"</span> &amp;

<span class="c"># -s 参数是加密方式和密码，-plugin 是插件，-plugin-opts 是插件参数，server 表示服务端，tls 表示使用 tls 加密，host 是域名，cert 是证书，key 是私钥</span>
</code></pre></div></div>

<h3 id="客户端-1">客户端<a id="shadowsocks-client"></a></h3>
<ul>
  <li>参考 <a href="https://github.com/shadowsocks/shadowsocks-windows">https://github.com/shadowsocks/shadowsocks-windows</a></li>
  <li>v2ray 插件<a href="https://github.com/shadowsocks/v2ray-plugin">https://github.com/shadowsocks/v2ray-plugin</a></li>
  <li>配置</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"configs"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"server"</span><span class="p">:</span><span class="w"> </span><span class="s2">"yourserverip"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"server_port"</span><span class="p">:</span><span class="w"> </span><span class="mi">443</span><span class="p">,</span><span class="w">
      </span><span class="nl">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"yourpassword"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"method"</span><span class="p">:</span><span class="w"> </span><span class="s2">"chacha20-ietf-poly1305"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"plugin"</span><span class="p">:</span><span class="w"> </span><span class="s2">"C:</span><span class="se">\\</span><span class="s2">v2ray</span><span class="se">\\</span><span class="s2">v2ray-plugin_windows_amd64.exe"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"plugin_opts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tls;host=example.com"</span><span class="p">,</span><span class="err">//ca.crt</span><span class="w"> </span><span class="err">提前导入到</span><span class="w"> </span><span class="err">windows</span><span class="w"> </span><span class="err">系统的受信任的根证书颁发机构，这里就不用配置</span><span class="w"> </span><span class="err">cert</span><span class="w"> </span><span class="err">了</span><span class="w">
      </span><span class="err">//</span><span class="w"> </span><span class="nl">"plugin_opts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tls;host=example.com;cert=./cert/ca.crt"</span><span class="p">,</span><span class="w"> 
      </span><span class="nl">"plugin_args"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
      </span><span class="nl">"remarks"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
      </span><span class="nl">"timeout"</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="v2ray">v2ray</h2>
<h3 id="服务端-2">服务端<a id="v2ray-server"></a></h3>
<ul>
  <li>参考 x-ui <a href="https://github.com/vaxilu/x-ui/">https://github.com/vaxilu/x-ui/</a></li>
  <li>命令 <code class="language-plaintext highlighter-rouge">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</code></li>
  <li>安装(支持docker)并且使用内置的ssl证书申请功能，它使用了 letsentrypted， 会自动续签，不用担心证书过期，也不需要安装 nginx，x-ui 内置了web服务器</li>
  <li>安装后保证 v2ray 插件的状态是 running，否则可能入站配置问题</li>
  <li>打开面板，配置入站：protocal: vless, 监听ip: 留白, 端口：443，开启 tls，tls 配置：域名：指向你代理服务器的域名，路径：选择ssl证书申请成功的路径,一般是在 /root/cert/你的域名.cer</li>
  <li>然后查看 v2ray 的状态</li>
</ul>

<h3 id="客户端-2">客户端<a id="v2ray-client"></a></h3>
<ul>
  <li>参考 <a href="https://www.v2ray.com/awesome/tools.html">https://www.v2ray.com/awesome/tools.html</a></li>
  <li>windows 平台推荐使用 <a href="https://github.com/2dust/v2rayN">v2rayN</a></li>
  <li>除了及时检查更新（自动把core，geo更新）外，无需修改其它配置</li>
  <li>导入订阅地址即可</li>
</ul>]]></content><author><name>Grissom</name></author><category term="network" /><category term="vpn" /><category term="proxy" /><summary type="html"><![CDATA[OpenVPN 安装 服务端 参考 https://github.com/angristan/openvpn-install 全部默认即可 vpn 会安装虚拟网卡接管全部流量，如果不需要全部走vpn, 需要配置route, 可以在客户端也可以在服务端配置,但最终连上服务端时，服务端会把 push “route ip mask “ 这些配置发送给客户端配置文件起效, 同时需要注释掉配置文件里的 push "redirect_gateway def1 bypass-dhcp" 防火墙需要开放 1194/udp, 1194/tcp 客户端 建议使用最新版的 OpenVPN GUI 安装后在网络适配器里会多出 OpenVPN Data Channel Offload， 旧版本(2.4)多出 本地连接2, 而且默认都有红叉(Network cable unplugged)，需要等连上服务端后才会变为可用 配置文件需要去掉 setenv opt block-outside-dns， 否则会导致未走 vpn 的流量全部被block掉，而无法访问网络 配置route route 10.0.0.0 255.255.255.0 vpn_gateway, 所有 10.*开头的ip都会走 vpn gateway, 该配置可以直接写死在客户端配置文件，也可以写在服务端 push "route 10.0.0.0 255.255.255.0 vpn_gateway" 客户端会先将域名解析成 ip 后，才会走 vpn, 所以通过 vpn 的http 请求已是通过 DNS 解析后的 ip, vpn 只是服务器和客户端之间的一条流量通道，它不是代理，它和 shadowsocks, v2ray 这些代理有本质区别，这些代理是直接代理所请求url的服务器，vpn 查看浏览器的 remote-ip url原服务器的ip, 但代理的是代理的ip，一般是 127.0.0.1, 它们共同点都是加密通信，访问网络最终由服务器端的网络负责。]]></summary></entry><entry><title type="html">Linux</title><link href="http://localhost:4000/os/linux/" rel="alternate" type="text/html" title="Linux" /><published>2023-05-23T00:00:00+08:00</published><updated>2023-05-23T00:00:00+08:00</updated><id>http://localhost:4000/os/linux</id><content type="html" xml:base="http://localhost:4000/os/linux/"><![CDATA[<h1 id="登录">登录</h1>
<h2 id="ssh-帐号和密码">SSH 帐号和密码</h2>

<h2 id="ssh-帐号和公钥">SSH 帐号和公钥</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen
<span class="c"># 一路回车，生成 id_rsa 和 id_rsa.pub，也可以输入passphrase，来保护 key, 每次使用 key 时都需要输入 passphrase</span>
<span class="c"># 将 id_rsa.pub 的内容添加到 ~/.ssh/authorized_keys 中</span>
<span class="nb">cat </span>id_rsa.pub <span class="o">&gt;&gt;</span> ~/.ssh/authorized_keys
<span class="c"># 将 id_rsa 拉到本地，供 xshell 使用 ssh 远程到服务器时使用</span>
</code></pre></div></div>

<h1 id="常用命令">常用命令</h1>
<h2 id="查看命令">查看命令</h2>

<h3 id="进入-root">进入 root</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-i</span>
</code></pre></div></div>

<h3 id="查看系统信息">查看系统信息</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">uname</span> <span class="nt">-a</span>
</code></pre></div></div>
<h3 id="查看用户信息">查看用户信息</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">whoami
id </span>grissom <span class="c"># 查看 grissom 用户</span>
</code></pre></div></div>
<h3 id="查看系统版本">查看系统版本</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /etc/issue <span class="c"># 查看系统版本</span>
<span class="nb">cat</span> /proc/version <span class="c"># 查看内核版本</span>
</code></pre></div></div>
<h3 id="查看当前目录">查看当前目录</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">pwd</span>
</code></pre></div></div>
<h3 id="查看当前目录下的文件">查看当前目录下的文件</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span>
<span class="c"># 包括隐藏文件</span>
<span class="nb">ls</span> <span class="nt">-a</span>
<span class="c"># 包括隐藏文件，包括文件的详细信息</span>
<span class="nb">ls</span> <span class="nt">-al</span>

<span class="nb">ls</span> <span class="nt">-lh</span> <span class="c"># 查看文件大小,人性化显示</span>
</code></pre></div></div>
<h3 id="查看端口占用情况">查看端口占用情况</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看所有端口占用情况</span>
netstat <span class="nt">-anp</span>
<span class="c"># 查看所有端口占用情况，只显示监听端口</span>
netstat <span class="nt">-anp</span> | <span class="nb">grep </span>LISTEN
<span class="c"># 查看指定端口占用情况</span>
lsof <span class="nt">-i</span>:8080 

ss <span class="nt">-anp</span> | <span class="nb">grep </span>8080

ss <span class="nt">-tunlp</span> | <span class="nb">grep </span>8080

</code></pre></div></div>
<h3 id="查看进程">查看进程</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ps <span class="nt">-e</span>
<span class="c"># 查看所有进程</span>
ps <span class="nt">-ef</span>
<span class="c"># 查看zookeeper进程</span>
ps <span class="nt">-ef</span> |grep zookeeper 
<span class="c"># 显示cpu,内存,启动时间,命令行,并按内存使用量倒序排序</span>
ps <span class="nt">-aux</span> <span class="nt">--sort</span><span class="o">=</span>-%mem
top <span class="c">#实时查看进程, shift+m 按内存排序</span>
</code></pre></div></div>
<h3 id="查看日志">查看日志</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看最后10行日志</span>
<span class="nb">tail</span> <span class="nt">-n</span> 10 /var/log/messages
<span class="c"># 查看最后10行日志，实时刷新</span>
<span class="nb">tail</span> <span class="nt">-f</span> <span class="nt">-n</span> 10 /var/log/messages
<span class="c"># 查看前面10行日志</span>
<span class="nb">head</span> <span class="nt">-n</span> 10 /var/log/messages
</code></pre></div></div>
<h3 id="查看文件">查看文件</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看文件内容</span>
<span class="nb">cat</span> /var/log/messages
<span class="c"># 查看文件内容，实时刷新</span>
<span class="nb">tail</span> <span class="nt">-f</span> /var/log/messages
</code></pre></div></div>
<h3 id="查看文件大小">查看文件大小</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看文件大小</span>
<span class="nb">du</span> <span class="nt">-sh</span> /var/log/messages
<span class="c"># 查看文件夹大小</span>
<span class="nb">du</span> <span class="nt">-sh</span> /var/log
dh <span class="nt">-h</span> /var/log
dh <span class="nt">-h</span> <span class="nt">--max-depth</span><span class="o">=</span>1 <span class="c"># 查看当前目录下的文件夹大小,深度为1</span>

<span class="nb">wc</span> <span class="o">[</span><span class="nt">-lmw</span><span class="o">]</span> <span class="o">[</span>file] <span class="c"># 统计文件的行数、字数、字节数</span>
<span class="nb">ls</span> |wc <span class="nt">-l</span> <span class="c"># 统计当前目录下的文件个数</span>
</code></pre></div></div>
<h3 id="查看磁盘使用情况">查看磁盘使用情况</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看磁盘使用情况</span>
<span class="nb">df</span> <span class="nt">-h</span>
</code></pre></div></div>
<h3 id="查看内存使用量">查看内存使用量</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看内存使用量</span>
free <span class="nt">-m</span>
</code></pre></div></div>
<h3 id="查看系统负载">查看系统负载</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看系统负载</span>
<span class="nb">uptime</span>
</code></pre></div></div>
<h3 id="查看系统时间">查看系统时间</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看系统时间</span>
<span class="nb">date</span>
</code></pre></div></div>
<h3 id="查看系统环境变量">查看系统环境变量</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看系统环境变量</span>
<span class="nb">env</span>
</code></pre></div></div>
<h3 id="查看防火墙状态">查看防火墙状态</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看防火墙状态</span>
systemctl status firewalld
<span class="c"># 查看防火墙开放的端口</span>
firewall-cmd <span class="nt">--list-ports</span>
<span class="c"># 查看防火墙开放的服务</span>
firewall-cmd <span class="nt">--list-services</span>

<span class="c"># 查看 ubuntu 防火墙状态</span>
systemctl status ufw
<span class="c"># 查看 ubuntu 防火墙开放的端口</span>
ufw status
<span class="c"># 查看 ubuntu 防火墙开放的服务</span>
ufw status numbered

<span class="c"># 云服务器不需要防火墙,通过安全组来控制端口</span>
</code></pre></div></div>
<h3 id="查看命令-1">查看命令</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看命令所在位置</span>
which java
whereis java <span class="c"># 查看命令所在位置，包括源码位置，以及配置文件位置</span>
<span class="c"># 查看命令的帮助信息</span>
man java
</code></pre></div></div>

<h3 id="查看ip">查看ip</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看ip</span>
ifconfig
<span class="c"># 查看ip，只显示ip</span>
ifconfig | <span class="nb">grep </span>inet | <span class="nb">grep</span> <span class="nt">-v</span> inet6 | <span class="nb">awk</span> <span class="s1">'{print $2}'</span>
</code></pre></div></div>

<h3 id="查看日志-1">查看日志</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看日志</span>
journalctl <span class="nt">-u</span> nginx.service
</code></pre></div></div>

<h2 id="操作命令">操作命令</h2>
<h3 id="用户和用户组管理">用户和用户组管理</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 修改用户密码</span>
passwd grissom
<span class="c"># 修改系统时间</span>
<span class="nb">date</span> <span class="nt">-s</span> <span class="s2">"2020-01-01 00:00:00"</span>
<span class="c"># 修改系统时区</span>
timedatectl set-timezone Asia/Shanghai
<span class="c"># 修改系统语言</span>
localectl set-locale <span class="nv">LANG</span><span class="o">=</span>zh_CN.UTF-8
<span class="c"># 修改系统主机名</span>
hostnamectl set-hostname grissom
<span class="c"># 添加用户</span>
useradd grissom
<span class="c"># 修改用户密码</span>
passwd grissom
<span class="c"># 添加用户到 sudo 组</span>
usermod <span class="nt">-aG</span> <span class="nb">sudo </span>grissom
<span class="c"># 添加用户到 root 组</span>
usermod <span class="nt">-aG</span> root grissom
<span class="c"># 删除用户</span>
userdel grissom
<span class="c"># 添加用户组</span>
groupadd g1
<span class="c"># 删除用户组</span>
groupdel g1
<span class="c"># 添加用户到用户组</span>
usermod <span class="nt">-aG</span> g1 grissom
<span class="c"># 删除用户从用户组</span>
gpasswd <span class="nt">-d</span> grissom g1
<span class="c"># 查看用户组</span>
<span class="nb">cat</span> /etc/group
<span class="c"># 查看用户</span>
<span class="nb">cat</span> /etc/passwd
<span class="c"># 查看用户所在组</span>
<span class="nb">cat</span> /etc/group | <span class="nb">grep </span>grissom
</code></pre></div></div>

<h3 id="创建删除修改文件夹">创建、删除、修改文件夹</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建文件夹</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ./data/<span class="o">{</span>dir1,dir2<span class="o">}</span>
<span class="c"># 删除文件夹</span>
<span class="nb">rm</span> <span class="nt">-rf</span> ./data/<span class="o">{</span>dir1,dir2<span class="o">}</span>
<span class="c"># 复制文件夹, -r 递归复制，-f 强制覆盖</span>
<span class="nb">cp</span> <span class="nt">-r</span> ./data/<span class="o">{</span>dir1,dir2<span class="o">}</span> ./data/<span class="o">{</span>dir1.bak,dir2.bak<span class="o">}</span>
<span class="c"># 修改文件权限,4r,2w,1x, 下面命令 owner 分rwx,group 分rx,other 分r</span>
<span class="nb">chmod</span> <span class="nt">-R</span> 777 ./data/<span class="o">{</span>dir1,dir2<span class="o">}</span>
<span class="nb">chmod</span> +x sth.sh <span class="c"># 给文件添加可执行权限</span>
<span class="nb">chmod </span>ug-x sth.sh <span class="c"># 给文件删除用户和组的可执行权限</span>
<span class="c"># 修改文件所有者，grissom 是用户名，groupname 是用户组名, 如果用户组不存在，则会创建用户组,也可以不指定用户组</span>
<span class="nb">chown</span> <span class="nt">-R</span> grissom:grissom ./data/<span class="o">{</span>dir1,dir2<span class="o">}</span>
<span class="c"># 修改文件夹所有者和权限</span>
<span class="nb">chown</span> <span class="nt">-R</span> grissom:grissom ./data/<span class="o">{</span>dir1,dir2<span class="o">}</span> <span class="o">&amp;&amp;</span> <span class="nb">chmod</span> <span class="nt">-R</span> 777 ./data/<span class="o">{</span>dir1,dir2<span class="o">}</span>
<span class="c"># 文件夹重命名</span>
<span class="nb">mv</span> ./data/logs ./data/logs.bak
</code></pre></div></div>
<h3 id="创建删除修改文件">创建、删除、修改文件</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 创建文件</span>
<span class="nb">touch</span> ./data/logs/test.log
<span class="c"># 写入文件内容，如果文件不存在，则创建文件，如果文件存在，则追加内容, &gt;&gt; 表示追加，&gt; 表示覆盖</span>
<span class="nb">echo</span> <span class="s2">"hello world"</span> <span class="o">&gt;&gt;</span> ./data/logs/test.log
<span class="c"># 删除文件</span>
<span class="nb">rm</span> <span class="nt">-rf</span> ./data/logs/test.log
<span class="c"># 复制文件夹, -r 递归复制，-f 强制覆盖</span>
<span class="nb">cp</span> <span class="nt">-r</span> ./data/test1/<span class="o">{</span>txt1.txt,txt2.txt<span class="o">}</span> ./data/test2
<span class="c"># 修改文件权限,4r,2w,1x, 下面命令 owner 分rwx,group 分rx,other 分r</span>
<span class="nb">chmod </span>754 ./data/logs/test.log
<span class="c"># 修改文件所有者，grissom 是用户名，groupname 是用户组名, 如果用户组不存在，则会创建用户组,也可以不指定用户组</span>
<span class="nb">chown </span>grissom:groupname ./data/logs/test.log
<span class="c"># 修改文件所有者和权限</span>
<span class="nb">chown </span>grissom:groupname ./data/logs/test.log <span class="o">&amp;&amp;</span> <span class="nb">chmod </span>777 ./data/logs/test.log
<span class="c"># 文件重命名</span>
<span class="nb">mv</span> ./data/logs/test.log ./data/logs/test.bak
</code></pre></div></div>

<h3 id="批量操作">批量操作</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 批量创建文件夹</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ./data/<span class="o">{</span>dir1,dir2<span class="o">}</span>
<span class="c"># 批量删除文件夹</span>
<span class="nb">rm</span> <span class="nt">-rf</span> ./data/<span class="o">{</span>dir1,dir2<span class="o">}</span>
<span class="c"># 批量复制文件夹, -r 递归复制，-f 强制覆盖</span>
<span class="nb">cp</span> <span class="nt">-r</span> ./data/<span class="o">{</span>dir1,dir2<span class="o">}</span> ./data/<span class="o">{</span>dir1.bak,dir2.bak<span class="o">}</span>
<span class="c"># 批量修改文件权限,4r,2w,1x, 下面命令 owner 分rwx,group 分rx,other 分r</span>
<span class="nb">chmod</span> <span class="nt">-R</span> 777 ./data/<span class="o">{</span>dir1,dir2<span class="o">}</span>
<span class="c"># 批量执行 shell 文件</span>
find ./data <span class="nt">-name</span> <span class="s2">"*.sh"</span> | xargs <span class="nt">-I</span> <span class="o">{}</span> sh <span class="o">{}</span>
<span class="k">for </span>file <span class="k">in</span> <span class="si">$(</span><span class="nb">ls</span> ./data/<span class="k">*</span>.sh<span class="si">)</span><span class="p">;</span> <span class="k">do </span>sh <span class="nv">$file</span><span class="p">;</span> <span class="k">done</span>

</code></pre></div></div>

<h1 id="linux-常识">linux 常识</h1>
<h2 id="linux-文件系统">linux 文件系统</h2>
<p>文件系统是一种数据结构，用于组织、管理和存储数据</p>
<h2 id="linux-哲学">linux 哲学</h2>
<p>do one thing and do it well, 一个程序只做一件事，做好这件事</p>
<h2 id="常见的配置文件和位置">常见的配置文件和位置</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /etc/passwd 用户信息，不要直接修改，使用 useradd usermod userdel 等命令来修改</span>
<span class="c"># /etc/shadow 用户密码,不要直接修改，使用 passwd 命令来修改</span>
<span class="c"># /etc/group 用户组信息,不要直接修改，使用 groupadd groupdel 等命令来修改</span>
<span class="c"># /etc/hosts 主机名和ip映射，可以直接修改</span>
<span class="c"># /etc/hostname 主机名，可以直接修改</span>
<span class="c"># /etc/profile 系统环境变量,使用 source /etc/profile 命令来生效</span>
<span class="c"># /etc/my.cnf mysql 配置文件</span>
<span class="c"># /etc/nginx/nginx.conf nginx 配置文件</span>
<span class="c"># /etc/nginx/conf.d/ nginx 配置文件目录</span>
<span class="c"># ~/.bashrc 用户环境变量,使用 source ~/.bashrc 命令来生效</span>
<span class="c"># ~/.bash_profile 用户环境变量,使用 source ~/.bash_profile 命令来生效</span>
<span class="c"># ~/.vimrc vim 配置文件</span>
<span class="c"># ~/.gitconfig git 配置文件</span>
<span class="c"># ~/.ssh/authorized_keys ssh 公钥</span>
<span class="c"># ~/.ssh/id_rsa ssh 私钥</span>
<span class="c"># ~/.ssh/id_rsa.pub ssh 公钥</span>
</code></pre></div></div>
<h2 id="linux-常用目录">linux 常用目录</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># /bin 常用命令</span>
<span class="c"># /sbin 系统管理命令</span>
<span class="c"># /etc 配置文件</span>
<span class="c"># /home 用户目录</span>
<span class="c"># /root root 用户目录</span>
<span class="c"># /usr/bin 用户命令</span>
<span class="c"># /usr/sbin 用户系统管理命令</span>
<span class="c"># /usr/local/bin 用户安装的命令</span>
<span class="c"># /var/log 日志目录</span>
<span class="c"># /var/lib/mysql mysql 数据目录</span>
<span class="c"># /var/lib/nginx nginx 数据目录</span>
<span class="c"># /mnt 挂载目录</span>
<span class="c"># /tmp 临时目录</span>
<span class="c"># /proc 进程目录</span>
<span class="c"># /dev 设备目录</span>
<span class="c"># /sys 系统目录</span>
</code></pre></div></div>]]></content><author><name>Grissom</name></author><category term="os" /><category term="linux" /><category term="server" /><summary type="html"><![CDATA[登录 SSH 帐号和密码]]></summary></entry><entry><title type="html">SSL SSH Login</title><link href="http://localhost:4000/security/ssl-ssh-login/" rel="alternate" type="text/html" title="SSL SSH Login" /><published>2023-05-23T00:00:00+08:00</published><updated>2023-05-23T00:00:00+08:00</updated><id>http://localhost:4000/security/ssl-ssh-login</id><content type="html" xml:base="http://localhost:4000/security/ssl-ssh-login/"><![CDATA[<h1 id="申请免费的ssl证书">申请免费的ssl证书</h1>
<h2 id="国内的阿里云腾讯云百度云等">国内的阿里云、腾讯云、百度云等</h2>
<p>都有免费的ssl证书，最长有效期1年，但是需要备案，备案需要花钱和实名制，所以这里不推荐使用。</p>
<h2 id="国外的letsencrypt">国外的letsencrypt</h2>
<p>可以申请免费的ssl证书，有效期3个月，但是可以自动续期，所以这里推荐使用。<br />
需要安装certbot，将nginx.cnf交给她管理，到期后自动续期。<br />
也可以手动生成证书，但是需要手动续期。</p>
<h2 id="cloudflare">cloudflare</h2>
<p>可申请 15 年有效期的免费 ssl 证书，但需要开启 cloudflare 的代理，它的代理免费，也有收费CDN。</p>
<h2 id="freesslcn">freessl.cn</h2>
<p>可申请 1 年有效期的免费 ssl 证书，不用备案但需要实名制。</p>
<h2 id="freesslorg">freessl.org</h2>
<p>可生成 90 天有效期的免费 ssl 证书，不用备案也不用实名制。</p>
<h2 id="openssl-工具">openssl 工具</h2>
<p>生成自签名证书，不用备案也不用实名制，但是浏览器会提示不安全。小批量客户使用，可以手动导入CA证书到windows系统，避免提示不安全。</p>

<h1 id="github">github</h1>
<h2 id="配置代理">配置代理</h2>
<p>修改 .gitconfig 文件，添加如下内容：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>http]
    proxy <span class="o">=</span> http://127.0.0.1:1080
</code></pre></div></div>
<p>1080 是你的 http 代理端口，如果是 socks5 代理，修改为：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>http]
    proxy <span class="o">=</span> socks5://127.0.0.1:1080
</code></pre></div></div>
<p>1080 是你的 socks5 代理端口。</p>

<p>除非你的代理是全局代理，否则需要配置 git 使用代理，否则 git 会直接访问 github，导致无法访问。<br />
而浏览器之所以可以访问 github，是因为浏览器会自动使用系统代理，所以不需要手动配置。</p>

<h2 id="登录方式">登录方式</h2>
<h3 id="使用-personal-access-token-登录">使用 personal access token 登录</h3>
<p>推荐使用 https， 因为它可以绕过防火墙。参考<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a>。 
windows credential manager 会保存密码，不用每次都输入密码。如果要删除登录，删除 credential manager 中的 github.com 的密码即可。也可以登录github.com 删除 personal access token。</p>
<h3 id="ssh">SSH</h3>
<p>使用 ssh 登录，需要先生成 ssh key，然后将公钥添加到 github.com 的 ssh key 中，参考<a href="https://github.com/settings/keys">https://github.com/settings/keys</a>。</p>]]></content><author><name>Grissom</name></author><category term="security" /><category term="ssh" /><category term="ssl" /><category term="login" /><summary type="html"><![CDATA[申请免费的ssl证书 国内的阿里云、腾讯云、百度云等 都有免费的ssl证书，最长有效期1年，但是需要备案，备案需要花钱和实名制，所以这里不推荐使用。 国外的letsencrypt 可以申请免费的ssl证书，有效期3个月，但是可以自动续期，所以这里推荐使用。 需要安装certbot，将nginx.cnf交给她管理，到期后自动续期。 也可以手动生成证书，但是需要手动续期。 cloudflare 可申请 15 年有效期的免费 ssl 证书，但需要开启 cloudflare 的代理，它的代理免费，也有收费CDN。 freessl.cn 可申请 1 年有效期的免费 ssl 证书，不用备案但需要实名制。 freessl.org 可生成 90 天有效期的免费 ssl 证书，不用备案也不用实名制。 openssl 工具 生成自签名证书，不用备案也不用实名制，但是浏览器会提示不安全。小批量客户使用，可以手动导入CA证书到windows系统，避免提示不安全。]]></summary></entry><entry><title type="html">Redis</title><link href="http://localhost:4000/database/redis/" rel="alternate" type="text/html" title="Redis" /><published>2023-05-22T14:28:33+08:00</published><updated>2023-05-22T14:28:33+08:00</updated><id>http://localhost:4000/database/redis</id><content type="html" xml:base="http://localhost:4000/database/redis/"><![CDATA[<h1 id="redis-特性">Redis 特性</h1>
<p>参考：https://www.cnblogs.com/kismetv/p/9853040.html,
它的实现原理和一些解决方案非常值得学习</p>

<h2 id="持久化">持久化</h2>
<h3 id="分类">分类</h3>
<ul>
  <li>RDB</li>
  <li>AOF</li>
</ul>

<h3 id="原理">原理</h3>
<ul>
  <li>参考：https://www.cnblogs.com/kismetv/p/9853040.html</li>
</ul>

<h2 id="主从复制">主从复制</h2>
<ul>
  <li>一主多从</li>
  <li>读写分离</li>
</ul>

<h2 id="哨兵高可用">哨兵：高可用</h2>
<ul>
  <li>需要独立的哨兵进程，哨兵进程会监控 Redis master 和 slave 进程</li>
  <li>故障转移，自动实现主从切换</li>
  <li>监控，负责监控 Redis master 和 slave 进程是否正常工作</li>
</ul>

<h2 id="集群分布式">集群：分布式</h2>]]></content><author><name>Grissom</name></author><category term="database" /><category term="redis" /><category term="cache" /><summary type="html"><![CDATA[Redis 特性 参考：https://www.cnblogs.com/kismetv/p/9853040.html, 它的实现原理和一些解决方案非常值得学习]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-05-20T14:28:33+08:00</published><updated>2023-05-20T14:28:33+08:00</updated><id>http://localhost:4000/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Grissom</name></author><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>